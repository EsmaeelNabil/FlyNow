/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package flyNow

import flyNow.build.GenerateApkTask
import flyNow.drive.UploadToDriveTask
import flyNow.slack.SlackNotifierTask
import flyNow.utils.*
import org.gradle.api.Project
import org.gradle.api.Plugin
import org.gradle.api.provider.Property
import org.gradle.kotlin.dsl.create
import org.gradle.kotlin.dsl.register

class FlyNowPlugin : Plugin<Project> {
    override fun apply(project: Project) {

        val configs = project.extensions.create<FlyNow>(EXTENSION_NAME)

        project.tasks.register<GenerateApkTask>(GenerateApkTask.name) {
            dependsOn(ASSEMBLE_DEBUG_TASK)
        }

        project.tasks.register<UploadToDriveTask>(UploadToDriveTask.name) {
            dependsOn(GenerateApkTask.name)

            client_id.set(configs.clientId.getOrThrow(CONFIG_MESSAGE)
                .ifEmpty { throw Exception(CLIENT_ID_EMPTY_MESSAGE) })

            client_secret.set(configs.clientSecret.getOrThrow(CONFIG_MESSAGE)
                .ifEmpty { throw Exception(CLIENT_SECRET_EMPTY_MESSAGE) })
        }

        project.tasks.register<SlackNotifierTask>(SlackNotifierTask.name) {
            dependsOn(UploadToDriveTask.name)

            botUserName.set(configs.botName.getOrElse(BOT_NAME))

            // slack userId/name
            authorName.set(configs.authorName.getOrElse("*${PLUGIN_NAME}*"))

            useCustomMessage.set(configs.useCustomMessage.getOrElse(false))

            customMessage.set(configs.customMessage.getOrElse("A default custom message"))

            channelWebhook.set(configs.channelWebhook.getOrThrow(CONFIG_MESSAGE)
                .ifEmpty { throw Exception(SLACK_WEBHOOK_EMPTY_MESSAGE) })
        }

        project.tasks.register(PLUGIN_NAME) {
            val shouldUseCustomMessage = configs.useCustomMessage.getOrElse(false)

            if (shouldUseCustomMessage) {

                val customMessageValue = project.getPropertyOrThrow(
                    MESSAGE_TERMINAL_PARAM,
                    CUSTOM_MESSAGE_EXCEPTION_MESSAGE
                ).toString()

                configs.customMessage.set(customMessageValue)

            }

            dependsOn(SlackNotifierTask.name)
        }

    }
}

fun Project.getPropertyOrThrow(propertyName: String, throwMessage: String) = try {
    property(propertyName)
} catch (e: Exception) {
    error(throwMessage)
}

fun <T> Property<T>.getOrThrow(throwMessage: String): T {
    return try {
        this.get()
    } catch (e: Exception) {
        throw Exception(throwMessage)
    }
}


